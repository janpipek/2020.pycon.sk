[
    {
        "name": "Tom Dyson",
        "bio": "Tom graduated from Balliol College, Oxford, in 1995, swapping the later philosophy of Wittgenstein for Netscape 2 and a 9600 baud modem. He ran a little agency called Naïve (“Why don’t you just call yourselves ‘Stupid’?”) until he joined forces with Olly in 2000, starting Torchbox with the aim of building beautiful online software for people who make the world a better place. As Technical Director, Tom is responsible for making sure the things we build are fast and reliable and easy to maintain. He manages the tech team and account directs many of our large technical projects. Along with Olly, Tom tries to make Torchbox a fun and inspiring place to work. Tom lives with his family in the countryside. He reads novels and gets cross at tennis. He plays in three bands who will probably never make it. He composed the theme tune to Charlie and Lola.",
        "country": "United Kingdom",
        "avatar": "img/speakers/tom_dyson.jpg",
        "links": {
            "linkedin": "https://www.linkedin.com/in/tomdyson/",
            "link": "https://torchbox.com/team/tom-dyson/"
        },
        "abstracts": [
            {
                "type": "Talk",
                "lang": "en",
                "title": "To be announced...",
                "text": "To be announced..."
            }
        ]
    },
    {
        "name": "Emilie Sengstschmid",
        "bio": "Emilie Sengstschmid is working as a software engineer at the University of Applied Arts Vienna. In 2016 she joined the Portfolio/Showroom project, whose main aim is to enable artists and scientists to announce, store and publish their own work and to exchange ideas with colleagues. Her responsibilities concern the entire development process from requirements engineering to deployment. She had worked on high performance applications at the Austrian Federal Computing Center before. She holds a bachelor's degree in Engineering.",
        "country": "Austria",
        "avatar": "img/speakers/emilie_sengstschmid.jpg",
        "links": {
        },
        "abstracts": [
            {
                "type": "Talk",
                "lang": "en",
                "title": "Portfolio: How to build a flexible web application using controlled vocabularies and data schemes",
                "text": "The presentation of art works requires a very versatile and flexible web application. Artists use different media and presentation formats (exhibition, installation, performance, dance, music, etc.). Portfolio is a state-of-the-art research information system designed specifically for the needs of artists. Portfolio’s requirements included creating different and flexible object types which can be defined through a controlled vocabulary maintained by a special non-technical user group.\nPortfolio is built with Django. To fulfill the requirement of flexible and expandable object types a single PostgreSQL JSON database field is used to save object specific data. Data schemes for JSON serialized data are built with marshmallow, a library for simplified object serialization. Skosmos is used to publish, and provide a REST API for the controlled vocabulary which is maintained by non-technical users through VocBench, a web-based, collaborative development platform for managing SKOS thesauri. Portfolio provides a REST API for its Vue.js powered frontend and communication to other applications."
            }
        ]
    },
    {
        "name": "Roman Imankulov",
        "bio": "Roman is a software developer who started his career creating web apps with Django before it was cool. Eventually he sticks to Python for more than a decade, successfully using it as a golden hammer it to solve all kinds of problems. Originally Russian, at the moment he lives in Porto and works at Doist as head of the back-end development team.",
        "country": "Portugal",
        "avatar": "img/speakers/roman_imankulov.jpg",
        "links": {
            "linkedin": "https://www.linkedin.com/in/roman-imankulov-91076144/",
            "twitter": "https://twitter.com/rdotpy",
            "github": "https://github.com/imankulov"
        },
        "abstracts": [
            {
                "type": "Talk",
                "lang": "en",
                "title": "Modernizing a twelve-year-old project",
                "text": "To be announced..."
            }
        ]
    },
    {
        "name": "Hannah Hazi",
        "bio": "I am an Engineer based in Cambridge, UK. I currently work at Stratasys as a C++, Python and Typescript developer, working on tools to support our GrabCAD Print software. In my spare time I love tinkering with Raspberry Pi and playing complicated board games.",
        "country": "United Kingdom",
        "avatar": "img/speakers/female.png",
        "links": {
        },
        "abstracts": [
            {
                "type": "Talk",
                "lang": "en",
                "title": "The Knowledge In The Code: Or How I Learned to Stop Worrying and Love Legacy Code",
                "text": "Legacy code. It's old, poorly documented, barely tested, a nightmare to work with. You've never met the people who wrote it, but if you did you'd have a thing or two to tell them! If you had the time, you'd love to re-write it all.\n\nBut what if I told you that there are gems hidden in your company's old code? That re-writing it from scratch would be a bad mistake?\n\nThis is the story of how I learned to love legacy code. And how you might, too!\n\nThis talk is a revised and improved version of one I originally gave at PyCon UK, with more of an emphasis on what good refactoring can look like."
            }
        ]
    },
    {
        "name": "Michal Cyprian",
        "bio": "Michal works as a software engineer at Kiwi.com. Python is his language of choice since high school. He likes challenges, travelling and learning new things.",
        "country": "Slovakia",
        "avatar": "img/speakers/michal_cyprian.jpg",
        "links": {
            "linkedin": "https://www.linkedin.com/in/michal-cyprian-b5b915127/"
        },
        "abstracts": [
            {
                "type": "Talk",
                "lang": "en",
                "title": "How (not) to turn Kubernetes self-healing capabilities into self-destructive machinery",
                "text": "Kubernetes won the container orchestration war in 2017 and become the de facto standard for deploying containerized applications at scale. Many software projects, including Python projects, are being migrated to Kubernetes nowadays. The vision of a beautiful Cloud-native ecosystem powered by Kubernetes, where the smallest misbehavior of services is detected and everything scales automatically is very nice. However, the way to such an ecosystem can be longer and harder than it seems to be. What are the real challenges of migrating complex Python system to Kubernetes? What are the threats you should be aware of?\n\nThis talk summarizes the experience gained during the migration of booking, one of the most critical Python services at Kiwi.com, to Google Kubernetes Engine. Booking is a mixture of legacy services, new services based on Flask and asynchronous Celery tasks. I will be talking about our approach, our success, but also our failures and things we've learned the hard way."
            }
        ]
    },
    {
        "name": "Filipa Andrade",
        "bio": "I am a software engineer working mainly with python, django and recently with flask. I love programming, I enjoy developing a project from scratch but also I have fun debugging, fixing and refactoring legacy code. Currently my main interest in programming is writing readable and beautiful code, I believe you can't have one without the other.",
        "country": "Portugal",
        "avatar": "img/speakers/filipa_andrade.jpg",
        "links": {
        },
        "abstracts": [
            {
                "type": "Talk",
                "lang": "en",
                "title": "Breaking stereotypes in tech",
                "text": "Like any other field, the tech world has many stereotypes, gender, ethnic or age stereotypes are fairly easy to spot. In this talk I will show you some of those stereotypes and present my ideas of where they come from. We will see why stereotypes are harmful, not only for the people involved but also for the tech world itself. I will share my personal perspective on how to break those stereotypes and open the way for more people to join our community."
            }
        ]
    },
    {
        "name": "Dom Weldon",
        "bio": "Dom Weldon is a Principal Software Engineer at decisionLab, a London-based mathematical modelling consultancy with expertise in machine learning, simulation, optimization and visualization. Dom's team specialize in taking models from data scientists and turning them into production ready tools. Current clients include the Royal Navy, Siemens and various UK public bodies.\n\nDom came to decisionLab from his PhD studies in Computational Geography at King's College London, his initial degree was in Natural Sciences at the University of Cambridge, and holds a master's in the historical and cultural geography of the Cold War United States. Outside of work, Dom is interested in languages and travelling, and holds a voluntary statutory appointment on a board monitoring the welfare and dignity of prisoners in a challenging North London jail.",
        "country": "United Kingdom",
        "avatar": "img/speakers/dom_weldon.jpg",
        "links": {
            "link": "https://www.decisionlab.co.uk/"
        },
        "abstracts": [
            {
                "type": "Talk",
                "lang": "en",
                "title": "Oxidizing MyPy: Typed Python, Rust and Rust-in-Python.",
                "text": "Python is a very readable, dynamically typed, interpreted, object oriented general purpose programming language that’s easy to learn, but offers almost unlimited power and flexibility to build almost whatever you want. However, as you go deeper into Python, some of the very features that made you fall in love with the language may start to limit what you can do: dynamic typing can make bugs hard to spot, large codebases can create a sea of objects, and the global interpreter lock (GIL) starts to impose a hard limit on performance. \n\nMeanwhile, Rust - a relatively new compiled systems programming language - is statically (and safely) typed, and offers and \"\"fearless\"\" concurrency without the limitations of the GIL; indeed, idiomatic Rust code runs at comparable speeds to C/C++. However, despite having a brilliant community, Rust is acknowledged as presenting a steep learning curve, and with so much Python being used in data science, academia, industry and beyond, switching entirely to Rust simply isn’t a sensible option for most teams. \n\nAt decisionLab, a mathematical modelling and data science consultancy based in central London, we wanted to improve our Python code quality and maintainability as much as possible, whilst also making use of the speed improvements that Rust could offer for some of our most performance critical algorithms.\n\nSo, we embraced typed Python, whilst also exploring Rust. So far, the effects on our code have been excellent. Not only did we spot bugs and improve our documentation using typed Python, but we were also able to use high level tools which leverage typed Python to build APIs and interfaces to our code and accelerate development. Best of all, using Rust from within our Python code was much easier than expected.\n\nThis talk will give a brief overview of typed Python, and how and why you would want to use it, alongside an overview of some excellent high-level tools that let your typed code fly. I'll also give an introduction to Rust the language, and the two major Rust-Python bindings: PyO3 and Rust-Python. We’ll then explore an example of how to write a Rust module and use it in Python.\n\nHopefully, I'll convince you that you don't need to be a computer science genius to work with a systems programming language, and that using Rust in your code doesn't require a complete re-write, but that you can actually start to swap-and-switch your code into Rust class by class, function by function.\n\nAt the same time, I'll reflect on the roles of Rust, Python and code generally in solving business problems. My aim in this talk is to show that Rust and Python are not enemies or competitors, but rather that they are different tools with different uses, and that when they are used in combination, great things can happen! In doing so, I'll offer my take on what I think the future of Rust is in Python."
            }
        ]
    },
    {
        "name": "Ines Meršak",
        "bio": "I hold a Master’s degree in mathematics and am currently a software developer at Bitstamp. I believe in writing and testing good software and am happiest when I get a lengthy peer review. I am also interested in data structures and algorithms and spend too much time playing RPGs (and too little time practising my guitar).",
        "country": "Slovenia",
        "avatar": "img/speakers/ines_mersak.jpg",
        "links": {
        },
        "abstracts": [
            {
                "type": "Talk",
                "lang": "en",
                "title": "Pushing Django to its limit: rally of 2017",
                "text": "Cyptocurrencies first came about in 2009 with Bitcoin. Two years later, Bitcoin’s price has risen above a dollar and two young men decided to start a cryptocurrency exchange in their own garage in Slovenia, armed with 1000 EUR starting capital and some knowledge of Python and Django.\nToday, Bitstamp is the longest-standing exchange. Still running on Django, it had the most uptime (the site was unavailable for only half an hour) amongst all cryptocurrency exchanges in the rally of December 2017.\n\nIn this talk, I will introduce the most important part of any cryptocurrency exchange: trading. We will take a look at different order types, explain when a match happens and touch upon the logic of our old matching engine. We will talk about the problems legacy code has brought us, the improvements we’ve had to make to survive the rally and why we (trading team at Bitstamp) are now moving from Python to Go."
            }
        ]
    },
    {
        "name": "Nicholas Thapen",
        "bio": "Nick is a founder of Sourcery, a startup that is using AI to help everyone write better code faster. He is a developer and architect with over a decade of experience in both academia and industry. He worked on machine learning and Twitter analytics at Imperial College London, and has also spent time as a developer and architect in the financial sector.",
        "country": "United Kingdom",
        "avatar": "img/speakers/nick_thapen.png",
        "links": {
            "linkedin": "https://www.linkedin.com/in/nicholas-thapen/",
            "twitter": "https://twitter.com/nthapen",
            "link": "https://sourcery.ai/"
        },
        "abstracts": [
            {
                "type": "Talk",
                "lang": "en",
                "title": "Sourcery - Write better code faster with AI",
                "text": "Sourcery is a new tool designed to take the hard work out of refactoring.\nIt uses AI to search the space of possible changes to the code in search of improvements, backed up by extensive static analysis to prevent changes to functionality.\nFind out how Sourcery was made and what it can do."
            }
        ]
    },
    {
        "name": "Lilian Nandi",
        "bio": "Lilian studied Computer Science at high school and did her PhD in Computer Modelling from University College London. She went on to looking at computer applications and programming in the pharmaceutical sector before entering formal teaching for the next generation. She is currently engaged in teaching Python programming, C# and Javascript. She has given lectures in conferences both in the UK and abroad about the teaching of Computer Programming to young people. She has ran computer clubs including that of 'computer-assisted' investment for children and is a full member of the British Computer Society.\n\nLilian firmly believes that in this emergent brave new world, the Anthrpocene age, the computer (with its associated technologies) is the harbinger to transform globally man's short slavish existence to a better one - a world community defined by longer, richer and freer life experiences. She believes it is imperative that our schools empower our young children with his new knowledge, and Lilian herself did help reshape the Computer Science Department of an independent boys' school as Head of Department. She has produced for children more than 75 YouTube (online) videos on Computer Science and Programming - and has had more than 12,000 hits globally.",
        "country": "United Kingdom",
        "avatar": "img/speakers/female.png",
        "links": {
        },
        "abstracts": [
            {
                "type": "Talk",
                "lang": "en",
                "title": "Creating the Next Generation of (Technology) Billionaires - Part 2",
                "text": "Our generation of young people in school (aged 5-18) have noticed the connection between Computer pRogramming, Technology & Success and Billionaires.On mass they are clamoring to master the skill of Computer pRogramming. We describe a successful working model for the teaching of Computer pRogamming.\n\nComputer Science is now regarded as one of the leading disciplines in the 21st century. Computers are ubiquitous and prevalent in most, if not all, sectors of our modern society – applications include using them in weather forecasting, robotic surgery, space exploration, e-commerce, smart cities, driverless cars, etc.\n\nTherefore, coding or computer programming is now regarded by many as an essential skill for the young person, and it has been dubbed the ‘4th’ R’ (computer pRogramming) along with Reading, wRiting and aRithmetic.\n\nIn recognition of the new status of computer programming, governments worldwide have launched initiatives to have it taught in schools from Kindergarten through to junior school and all the way through secondary school.\n\nSo, the question emerges is how do we best teach and motivate the next generation in acquiring this skill? Given the fact that this field is very much in its infancy, there are insufficient number of skilled Computer Science teachers and very little pedagogy to guide the educator. Therefore, the whole world is learning how best to teach this subject by trial and error.\n\nThe talk will describe a case study whereby coding/computer programming, in the form of Python programming, was introduced to a group of 110 young people from the ages of 11 to 18 (Years 7-13 in a U.K secondary school). The talk will include descriptions of the various teaching methodologies introduced to the young people for this purpose and the outcomes; the talk will also address various challenges and questions about how to teach coding to young people. The talk will conclude with helpful suggestions, based on the findings of the case study, on how to proceed with the teaching of computer programming to these people."
            }
        ]
    },
    {
        "name": "Dmitry Dygalo",
        "bio": "I am a team lead at kiwi.com in Prague. I started with Python in 2010 as a hobby during the university, then switched to a fulltime developer job after graduation. I love writing tests and cares about code maintainability. My hobbies are open source and traveling.",
        "country": "Czech Republic",
        "avatar": "img/speakers/dmitry_dygalo.jpg",
        "links": {
            "github": "https://github.com/Stranger6667",
            "twitter": "https://twitter.com/Stranger6667"
        },
        "abstracts": [
            {
                "type": "Talk",
                "lang": "en",
                "title": "Stop writing tests for your web API! Try to generate them first",
                "text": "Having a comprehensive test suite is a crucial part of modern software development. But often, writing tests at scale is a tiresome and error-prone process.\n\nIn this talk, I will share thoughts and ideas about the applicability of property-based testing for web applications, show concrete examples and tools that will improve your test suites with minimal efforts.\nWe'll go through problems in testing that we are facing in Kiwi.com and the story behind Schemathesis - a tool that brings a popular Hypothesis testing library to the world of web applications."
            }
        ]
    },
    {
        "name": "Brendan Maginnis",
        "bio": "Brendan is the cofounder of Sourcery, a startup who have just released their first product, a tool for automatically refactoring Python using AI.\n\nSourcery's goal is to help everyone write clean and simple code.",
        "country": "United Kingdom",
        "avatar": "img/speakers/brendan_maginnis.jpg",
        "links": {
            "link": "https://sourcery.ai/"
        },
        "abstracts": [
            {
                "type": "Talk",
                "lang": "en",
                "title": "The Future of Software Development",
                "text": "AI is revolutionising everything it touches, and is of course written by software developers.\nWhat happens when we apply AI techniques to software development?\nWhat's the current state of the art, and where are things heading?"
            }
        ]
    },
    {
        "name": "Peter Dolák",
        "bio": "Contributing to Exponea's core product mostly as a backend developer in Python, Go and C++ for over 5 years since finishing studies at Computer Science at FMFI UK BA, helping Exponea to become one of the leaders in the CDP and Marketing Cloud market. Have developed many other for-profit and non-profit web applications, with the most popular one having been used by over 100k registered users across the globe.",
        "country": "Slovakia",
        "avatar": "img/speakers/peter_dolak.jpg",
        "links": {
            "link": "https://exponea.com/"
        },
        "abstracts": [
            {
                "type": "Talk",
                "lang": "en",
                "title": "This too shall parse",
                "text": "You used a parser the last time you ran any Python script. You created a simple parser the last time you wrote any regular expression. But when your program needs to understand languages that regexps just don't get, you may have to reach for a proper context-free parser. In this talk I will focus on the kind of problems that need such a parser, how to define artificial languages with grammars, what kinds of parsers there are and what are they suited for. I will also show off the Python parsing library \"lark\" and some cool stuff I made with it for Exponea - like our own query language."
            }
        ]
    },
    {
        "name": "Michal Petrucha",
        "bio": "Michal is a Pythonista at heart who started using the language back in high school, and never really found another one that could take its place.\nGenerally involved in server-side back-end work, enjoying some lower level systems programming and networking on occasion, also interested in security. Out in the real world, a crazy homebrewing experimenter, vegetable fermenter, heavy music aficionado, and martial artist.",
        "country": "Slovakia / Sweden",
        "avatar": "img/speakers/michal_petrucha.jpg",
        "links": {
            "twitter": "https://twitter.com/koniiiik",
            "link": "http://koniiiik.org"
        },
        "abstracts": [
            {
                "type": "Talk",
                "lang": "en",
                "title": "Autopsy of a serial burnout",
                "text": "Alright, let's be real, burnout is a thing. It's been talked enough about already at various conferences for us to know at least that much. And yet, the more bone-headed among us will look for any excuse to refuse admitting it to ourselves. Not even after it knocks us out two, three, four times. Not even after our doctor offers help. (I wish I was making this up.)\n\nHearing about this in abstract terms is useful, of course. Every talk drives a different point home. It only gets you so far, though. That's why I'm going to take another approach here – I want to tell my personal story as someone who grew up around the block, and try to make a post-mortem of several instances of burnout, so that you can avoid making the same mistakes that I did. Spoiler: we'll go as far back as high school.\n\nLuckily, in this case, the autopsy does not involve any actual death (that I know of)!"
            }
        ]
    },
    {
        "name": "Zuzana Tkáčová",
        "bio": "Vyštudovala umelú inteligenciu na FEI TU v Košiciach. Učiteľka informatiky, t.č. pôsobí na Ústave informatiky PF UPJŠ, kde pripravuje a vedie kurzy pre učiteľov informatiky ZŠ a SŠ. Venuje sa didaktickým inováciám - aktivizujúcim a bádateľským metódam výučby informatiky, physical computingu, creative computingu, umelej inteligencii a prepájaniu informatiky a STE(A)M predmetov. Spolupracuje s občianskym združením Aj Ty v IT ako lektorka programátorských kurzov pre dievčatá a ženy.",
        "country": "Slovakia",
        "avatar": "img/speakers/zuzana_tkacova.jpg",
        "edusummit": true,
        "links": {
        },
        "abstracts": [
            {
                "type": "Talk",
                "lang": "sk",
                "title": "Python ako nástroj pre STE(A)M problémy a úlohy",
                "text": "Výučba programovania nemusí byť limitovaná len tradičnými matematicko-logicky orientovanými úlohami. Reálny život a prepojenie na reálne technické, prírodovedné alebo umelecké témy prinášajú priestor pre nové nápady a aktívne zapojenie aj žiakov, ktorí nemajú k programovaniu prirodzene pozitívny postoj. Cieľom príspevku je ukázať Python nie ako nástroj na výučbu programovania (t.j. Python pre informatiku), ale nástroj pre riešenie prírodovedných, umeleckých a technických problémov v kontexte stredoškolskej informatiky (t.j. Python pre prírodné a technické vedy a umenie) a ako využívať jeho reálny potenciál na hodinách informatiky nad rámec tradičných \"programátorských\" úloh."
            }
        ]
    },
    {
        "name": "Peter Kučera",
        "bio": "Stredoškolský učiteľ informatiky, autor učebníc Pythonu\n\nPôsobí ako učiteľ informatiky na 1. súkromnom gymnáziu v Bratislave. Vytvoril sériu učebníc Programujeme v Pythone spolu s Príručkami pre učiteľa, maturitnou zbierkou úloh a zbierkou testov. Vedie Klub učiteľov informatiky. Realizuje školenia jazyka Python pre učiteľov. Na praxi pripravuje študentov učiteľstva informatiky (fakultný učiteľ FMFI UK).",
        "country": "Slovakia",
        "avatar": "img/speakers/peter_kucera.jpg",
        "edusummit": true,
        "links": {
        },
        "abstracts": [
            {
                "type": "Talk",
                "lang": "sk",
                "title": "Programujeme v Pythone hardvér",
                "text": "Už niekoľko rokov s našimi študentmi programujeme v Pythone. Okrem klasického programovania ich najnovšie učíme programovať v jazyku Python aj hardvér. Má sa škola venovať programovaniu hardvéru? Aké to má výhody? Ako začať a čomu sa venovať? Podelíme sa s našimi skúsenosťami. Ukážeme vám, ako študenti vytvorili školskú meteostanicu, paličku pre nevidiacich či automatické zavlažovanie.\nV príspevku porovnáme skúsenosti s programovaním hardvéru a klasickým programovaním. Uvedieme, že programovanie hardvéru je komplexnejšia záležitosť. Okrem samotného programovania rozvíja i ďalšie zručnosti, učí systematicky hľadať chyby a tvorivo myslieť. Po zvládnutí základov považujeme za dôležité, aby študenti v tímoch vytvárali vlastné hardvérové projekty, čím učiteľ ustúpi do úzadia a prácu na získavaní poznatkov prevezmú žiaci. Darí sa nám takto organizovať vzdelávanie a povieme vám, ako na to."
            }
        ]
    },
    {
        "name": "Jaroslav Výbošťok",
        "bio": "Viac ako 13 rokov vyučuje informatiku a semináre z programovania pre maturantov na Gymnáziu Jura Hronca v Bratislave. Učil tiež na osemročnom gymnáziu na Bajkalskej v Bratislave a základnej škole v Detve. Je spoluautorom učebníc Programujeme v Pythone – druhý a tretí diel a Maturujeme v Pythone. Na praxi pripravuje študentov učiteľstva informatiky ako fakultný učiteľ FMFI UK.",
        "country": "Slovakia",
        "avatar": "img/speakers/jaroslav_vybostok.jpg",
        "edusummit": true,
        "links": {
        },
        "abstracts": [
            {
                "type": "Talk",
                "lang": "sk",
                "title": "Programovací jazyk Robot Karel po novom a online.",
                "text": "V mojom príspevku predstavím nové online prostredie a metodiku pre výučbu algoritmizácie prioritne pre druhý stupeň základných škôl. Prostredie a metodiku som vyvinul na základe mojich skúseností s vyučovaním na ZŠ a osemročnom gymnáziu. Založené je na známom koncepte programovania robota Karla v štvorcovej sieti. Spomeniem tiež praktické skúsenosti z výučby a reakcie žiakov pri programovaní Karla, ktoré mi pomohli pri ďalšom vývoji. Uvediem aj čo má táto prednáška spoločné s Pythonom a ako ma jazyk Python pri tvorbe inšpiroval."
            }
        ]
    }
]